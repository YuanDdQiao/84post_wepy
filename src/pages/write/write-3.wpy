<template>
  <view>

    <view>
      <view>写</view>
      <view>选</view>
      <view>寄</view>
    </view>

    <view wx:if="pageError">{{ pageError }}</view>

    <form report-submit="True" @submit="bindSubmit">
      <view>收信人</view>

      <view class="{{ toNameError ? 'error' : '' }}">
        <view>称呼</view>
        <input type="text" confirm-type="next" @input="bindInput" data-name="toName" value="{{ toName }}"/>
        <view>{{ toNameErrorInfo }}</view>
      </view>

      <view class="{{ toAddressError ? 'error' : '' }}">
        <view>地址</view>
        <form report-submit="True" @submit="bindToAddress">

          <button formType="submit">
            <view>{{ toAddress }}</view>
          </button>
        </form>
        <view>{{ toAddressErrorInfo }}</view>
      </view>

      <view class="{{ toZipError ? 'error' : '' }}">
        <view>邮编</view>
        <input type="number" confirm-type="next" @input="bindInput" data-name="toZip" value="{{ toZip }}"/>
        <view>{{ toZipErrorInfo }}</view>
      </view>

      <view>
        <view>手机号</view>
        <input type="number" confirm-type="next" @input="bindInput" data-name="toTel" value="{{ toTel }}"/>
      </view>

      <view>寄信人</view>

      <view>
        <view>称呼</view>
        <input type="text" confirm-type="next" @input="bindInput" data-name="fromName" value="{{ fromName }}"/>
      </view>

      <view>
        <view>地址</view>
        <form report-submit="True" @submit="bindFromAddress">

          <button formType="submit">
            <view>{{ fromAddress }}</view>
          </button>
        </form>
      </view>

      <view>
        <view>邮编</view>
        <input type="number" confirm-type="next" @input="bindInput" data-name="fromZip" value="{{ fromZip }}"/>
      </view>

      <view>
        <view>手机号</view>
        <input type="number" confirm-type="done" @input="bindInput" data-name="fromTel" value="{{ fromTel }}"/>
      </view>

      <view>邮票</view>
      <view>
        <block wx:for="{{ letterStamps }}" wx:key="id">
          <form report-submit="True" @submit="bindStampChoose">
            <button formType="submit" id="{{ index }}">
              <view class="{{ item.choose? 'choose' : '' }}">
                <image src="{{ item.icon }}"></image>
              </view>
            </button>
          </form>
        </block>
      </view>

      <view>
        <button formType="submit">下一步</button>
      </view>

    </form>


  </view>
</template>

<script>
  import wepy from 'wepy'
  import api from '@/utils/api'

  export default class extends wepy.page {
    /**
     * 页面配置对象，对应于原生的 page.json 文件
     */
    config = {
      navigationBarTitleText: '填写信息'
    }

    /**
     * 页面渲染数据对象，存放可用于页面模板绑定的渲染数据
     */
    data = {
      letterStamps: [],
      pageError: '',

      toName: '',
      fromName: '',
      toNameError: false,
      toNameErrorInfo: '',

      toAddress: '点击选择地址',
      fromAddress: '点击选择地址',
      toAddressError: false,
      toAddressErrorInfo: '',

      toZip: '',
      fromZip: '',
      toZipError: false,
      toZipErrorInfo: '',

      toTel: '',
      fromTel: ''
    }

    /**
     * wxml 事件处理函数对象，存放响应 wxml 中所捕获到的事件的函数，如 bindtap、bindchange
     */
    methods = {
      bindStampChoose(e) {
        api.formIdSubmit(e.detail.formId)
        // console.log(e.detail.target.id)
        for (let ls of this.letterStamps) {
          ls.choose = false
        }
        this.letterStamps[e.detail.target.id].choose = true
        this.$apply()
        this.$parent.globalData.letterInfo.letterStamp = this.letterStamps[e.detail.target.id]
        wepy.setStorage({
          key: 'letterInfo-letterStamp',
          data: this.letterStamps[e.detail.target.id]
        })
      },
      async bindSubmit(e) {
        api.formIdSubmit(e.detail.formId)
        console.log(this.$parent.globalData.letterInfo)
        let submit = true
        if (this.$parent.globalData.letterInfo.shiftInfo.toName.replace(/\s/g, '').length === 0) {
          submit = false
          this.toNameError = true
          this.toNameErrorInfo = '送达人姓名必须填写'
        } else {
          this.toNameError = false
          this.toNameErrorInfo = ''
        }
        if (this.$parent.globalData.letterInfo.shiftInfo.toZip.replace(/\s/g, '').length === 0) {
          submit = false
          this.toZipError = true
          this.toZipErrorInfo = '送达人邮编必须填写'
        } else {
          this.toZipError = false
          this.toZipErrorInfo = ''
        }
        if (this.$parent.globalData.letterInfo.shiftInfo.toAddress.name === undefined) {
          submit = false
          this.toAddressError = true
          this.toAddressErrorInfo = '送达人地址必须选择'
        } else {
          this.toAddressError = false
          this.toAddressErrorInfo = ''
        }
        this.$apply()
        if (submit) {
          let res = await api.request({
            url: 'letter/submit/',
            method: 'POST',
            data: this.$parent.globalData.letterInfo
          })
          console.log(res.data)
          let errLevel = 2
          let errMsg = ''
          try {
            errLevel = parseInt(res.data.err_level)
            errMsg = String(res.data.err_msg)
          } catch (e) {
            errLevel = 2
            errMsg = '未知错误，请重试'
          }
          if (errLevel === 0) {
            this.$parent.globalData.currentLetter = res.data
            wepy.navigateTo({
              url: 'write-4'
            })
          } else if (errLevel === 1) {
            this.pageError = errMsg
            this.$apply()
            wepy.pageScrollTo({
              scrollTop: 0
            })
          } else {
            this.$parent.globalData.writeIndexError = errMsg
            wepy.switchTab({
              url: 'index'
            })
          }
        }
      },
      bindInput(e) {
        // console.log(e.currentTarget.dataset.name)
        // console.log(e.detail.value)
        let key = e.currentTarget.dataset.name
        let value = e.detail.value
        console.log(`${key}: ${value}`)
        this.$parent.globalData.letterInfo.shiftInfo[key] = value
        wepy.setStorage({
          key: `letterInfo-shiftInfo-${key}`,
          data: value
        })
      },
      async bindToAddress(e) {
        await api.getAuthScope('scope.userLocation')

        let res = await wepy.chooseLocation()

        console.log(res)

        this.$parent.globalData.letterInfo.shiftInfo.toAddress = res

        this.$parent.globalData.letterInfo.shiftInfo.toAddress.showName = res.name

        if (this.$parent.globalData.letterInfo.shiftInfo.toAddress.showName === '') {
          this.$parent.globalData.letterInfo.shiftInfo.toAddress.showName = res.address
        }
        if (this.$parent.globalData.letterInfo.shiftInfo.toAddress.showName === '') {
          this.$parent.globalData.letterInfo.shiftInfo.toAddress.showName = `${res.address.latitude}, ${res.address.longtitude}`
        }

        wepy.setStorage({
          key: 'letterInfo-shiftInfo-toAddress',
          data: this.$parent.globalData.letterInfo.shiftInfo.toAddress
        })

        this.toAddress = this.$parent.globalData.letterInfo.shiftInfo.toAddress.showName
        this.$apply()
      },
      async bindFromAddress(e) {
        await api.getAuthScope('scope.userLocation')

        let res = await wepy.chooseLocation()

        console.log(res)

        this.$parent.globalData.letterInfo.shiftInfo.fromAddress = res

        this.$parent.globalData.letterInfo.shiftInfo.fromAddress.showName = res.name

        if (this.$parent.globalData.letterInfo.shiftInfo.fromAddress.showName === '') {
          this.$parent.globalData.letterInfo.shiftInfo.fromAddress.showName = res.address
        }
        if (this.$parent.globalData.letterInfo.shiftInfo.fromAddress.showName === '') {
          this.$parent.globalData.letterInfo.shiftInfo.fromAddress.showName = `${res.address.latitude}, ${res.address.longtitude}`
        }

        wepy.setStorage({
          key: 'letterInfo-shiftInfo-fromAddress',
          data: this.$parent.globalData.letterInfo.shiftInfo.fromAddress
        })

        this.fromAddress = this.$parent.globalData.letterInfo.shiftInfo.fromAddress.showName
        this.$apply()
      }
    }

    /**
     * WePY组件事件处理函数对象，存放响应组件之间通过 broadcast、emit、invoke所传递的事件的函数
     */
    events = {}

    /**
     * 生命周期函数--监听页面加载（一个页面只会调用一次）
     */
    async onLoad() {
      let e = await api.request('letter/stamp/')
      this.letterStamps = e.data
      for (let ls of this.letterStamps) {
        ls.icon = decodeURIComponent(ls.icon)
        ls.choose = false
      }
      this.$apply()

      this.$parent.globalData.letterInfo.letterStamp = this.letterStamps[0]
      this.$parent.globalData.letterInfo.shiftInfo = {
        toName: '',
        toTel: '',
        toZip: '',
        fromName: '',
        fromTel: '',
        fromZip: '',
        toAddress: {},
        fromAddress: {}
      }
      // 记住一般信息（'toName', 'toTel', 'toZip', 'fromName', 'fromTel', 'fromZip'）
      let key = ['toName', 'toTel', 'toZip', 'fromName', 'fromTel', 'fromZip']

      await key.forEach(async k => {
        try {
          let v = await wepy.getStorage({
            key: `letterInfo-shiftInfo-${k}`
          })
          this[k] = v.data
          this.$parent.globalData.letterInfo.shiftInfo[k] = v.data
        } catch (e) {
          this[k] = ''
          this.$parent.globalData.letterInfo.shiftInfo[k] = ''
        }
      })
      // 记住地址
      try {
        let v = await wepy.getStorage({
          key: 'letterInfo-shiftInfo-toAddress'
        })

        this.$parent.globalData.letterInfo.shiftInfo.toAddress = v.data
        this.toAddress = v.data.showName
      } catch (e) {
      }
      try {
        let v = await wepy.getStorage({
          key: 'letterInfo-shiftInfo-fromAddress'
        })

        this.$parent.globalData.letterInfo.shiftInfo.fromAddress = v.data
        this.fromAddress = v.data.showName
      } catch (e) {
      }
      // 记住邮票
      try {
        let v = await wepy.getStorage({
          key: 'letterInfo-letterStamp'
        })
        let letterStampId = v.data.id
        let tls = this.letterStamps.find(ls => ls.id === letterStampId)
        if (tls) {
          tls.choose = true
          this.$parent.globalData.letterInfo.letterStamp = tls
        } else {
          this.letterStamps[0].choose = true
          this.$parent.globalData.letterInfo.letterStamp = this.letterStamps[0]
        }
      } catch (e) {
        this.letterStamps[0].choose = true
        this.$parent.globalData.letterInfo.letterStamp = this.letterStamps[0]
      }
      this.$apply()
    };

    /**
     * 生命周期函数--监听页面显示（每次打开页面都会调用一次）
     */
    async onShow() {
    };

    /**
     * 生命周期函数--监听页面初次渲染完成
     * 页面初次渲染完成 —— 一个页面只会调用一次，代表页面已经准备妥当，可以和视图层进行交互
     */
    async onReady() {
    };

    /**
     * 生命周期函数--监听页面隐藏（当 navigateTo 或底部 tab 切换时调用）
     */
    async onHide() {
    };

    /**
     * 生命周期函数--监听页面卸载（当 redirectTo 或 navigateBack 的时候调用）
     */
    async onUnload() {
    };

    /**
     * 页面相关事件处理函数--监听用户下拉动作
     */
    async onPullDownRefresh() {
    };

    /**
     * 页面上拉触底事件的处理函数
     */
    async onReachBottom() {
    };

    /**
     * 用户点击右上角分享
     */
    async onShareAppMessage() {
    };
  }
</script>

<style lang="less">
  .choose {
    border: red 3px solid;
  }

  .error {
    color: red
  }

</style>
