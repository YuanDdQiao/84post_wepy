<template>
  <view class="bigholder">

    <view class="processbarholder ">

      <view class="progress processdone">写</view>
      <view class="progress-middle processdone">选</view>
      <view class="progress processdone">寄</view>
    </view>
    <form report-submit="True" @submit="bindSubmit">
      <view class="infoform">

          <image class="logo" src="/images/84_logo.png"></image>
          <image class="infoformlogo" src="/images/mailsendingform.svg"></image>
          <view class="note">发送邮件需要填写并提交寄件信息单，请正确填写收信人和寄件人信息并选择邮票。寄信嘛，要有仪式感。</view>
          <view class="roletype">- 收信人 -</view>

          <view class="{{ toNameError ? 'error' : '' }} ">
            <view class="infotypeholder">
            <view class="infotype">称呼</view>
            <input class="inputbox {{ toNameError ? '.lineerror' : '' }}" type="text" confirm-type="next" @input="bindInput" data-name="toName" value="{{ toName }}"/>
            </view>
            <view class="errorinfo">{{ toNameErrorInfo }}</view>
          </view>

          <view class="{{ toAddressError ? 'error' : '' }}">
            <view class="infotypeholder">
              <view class="infotype">地址</view>
              <form report-submit="True" @submit="bindToAddress">

                <button class="choosebutton {{toAddressChosen ? 'chosen' : ''}}" formType="submit">
                  <view>{{ toAddress }}</view>
                </button>
              </form>
            </view>
            <view class="errorinfo">{{ toAddressErrorInfo }}</view>
          </view>

          <view class="{{ toZipError ? 'error' : '' }}">
            <view class="infotypeholder">
              <view class="infotype">邮编</view>
              <input class="inputbox" type="number" confirm-type="next" @input="bindInput" data-name="toZip" value="{{ toZip }}" maxlength="6"/>
            </view>
            <view class="errorinfo">{{ toZipErrorInfo }}</view>
          </view>

          <view class="infotypeholder">
            <view class="infotype">手机</view>
            <input class="inputbox" type="number" confirm-type="next" @input="bindInput" data-name="toTel" value="{{ toTel }}" maxlength="11"/>
          </view>

          <view class="roletype">- 寄信人 -</view>

          <view class="infotypeholder">
            <view class="infotype">称呼</view>
            <input  class="inputbox" type="text" confirm-type="next" @input="bindInput" data-name="fromName" value="{{ fromName }}"/>
          </view>

          <view class="infotypeholder">
            <view class="infotype">地址</view>
            <form report-submit="True" @submit="bindFromAddress">

              <button class="choosebutton {{fromAddressChosen ? 'chosen' : ''}}" formType="submit">
                <view>{{ fromAddress }}</view>
              </button>
            </form>
          </view>

          <view class="infotypeholder">
            <view class="infotype">邮编</view>
            <input  class="inputbox" type="number" confirm-type="next" @input="bindInput" data-name="fromZip" value="{{ fromZip }}" maxlength="6"/>
          </view>

          <view class="infotypeholder">
            <view class="infotype">手机</view>
            <input class="inputbox" type="number" confirm-type="done" @input="bindInput" data-name="fromTel" value="{{ fromTel }}" maxlength="11" />
          </view>

          <view class="roletype" >- 邮票 -</view>
          <view class="stampselector">
            <block wx:for="{{ letterStamps }}" wx:key="id">
              <form report-submit="True" @submit="bindStampChoose">
                <button class="stampbutton {{ item.choose? 'choose' : '' }}" formType="submit" id="{{ index }}">
                  <view class=" stampview">
                    <image class="stampview" src="{{ item.icon }}"></image>
                  </view>
                </button>
              </form>
            </block>
          </view>
  </view>
      <button class="nextbutton" formType="submit">下一步</button>
      <form report-submit="True" @submit="bindReset">
            <button class="resetbutton" formType="submit">重置</button>
      </form>

      </form>
  </view>
</template>

<script>
  import wepy from 'wepy'
  import api from '@/utils/api'

  export default class extends wepy.page {
    /**
     * 页面配置对象，对应于原生的 page.json 文件
     */
    config = {
      navigationBarTitleText: '填写信息'
    }

    /**
     * 页面渲染数据对象，存放可用于页面模板绑定的渲染数据
     */
    data = {
      letterStamps: [],

      toName: '',
      fromName: '',
      toNameError: false,
      toNameErrorInfo: '',

      toAddress: '点击选择地址',
      fromAddress: '点击选择地址',
      toAddressChosen: false,
      fromAddressChosen: false,
      toAddressError: false,
      toAddressErrorInfo: '',

      toZip: '',
      fromZip: '',
      toZipError: false,
      toZipErrorInfo: '',

      toTel: '',
      fromTel: ''
    }

    /**
     * wxml 事件处理函数对象，存放响应 wxml 中所捕获到的事件的函数，如 bindtap、bindchange
     */
    methods = {
      bindStampChoose(e) {
        api.formIdSubmit(e.detail.formId)
        // console.log(e.detail.target.id)
        for (let ls of this.letterStamps) {
          ls.choose = false
        }
        this.letterStamps[e.detail.target.id].choose = true
        this.$apply()
        this.$parent.globalData.letterInfo.letterStamp = this.letterStamps[e.detail.target.id]
        wepy.setStorage({
          key: 'letterInfo-letterStamp',
          data: this.letterStamps[e.detail.target.id]
        })
      },
      async bindSubmit(e) {
        api.formIdSubmit(e.detail.formId)
        console.log(this.$parent.globalData.letterInfo)
        let submit = true
        if (this.$parent.globalData.letterInfo.shiftInfo.toName.replace(/\s/g, '').length === 0) {
          submit = false
          this.toNameError = true
          this.toNameErrorInfo = '送达人姓名必须填写'
        } else {
          this.toNameError = false
          this.toNameErrorInfo = ''
        }
        if (this.$parent.globalData.letterInfo.shiftInfo.toZip.replace(/\s/g, '').length === 0) {
          submit = false
          this.toZipError = true
          this.toZipErrorInfo = '送达人邮编必须填写'
        } else {
          this.toZipError = false
          this.toZipErrorInfo = ''
        }
        if (this.$parent.globalData.letterInfo.shiftInfo.toAddress.name === undefined) {
          submit = false
          this.toAddressError = true
          this.toAddressErrorInfo = '送达人地址必须选择'
        } else {
          this.toAddressError = false
          this.toAddressErrorInfo = ''
        }
        if (this.$parent.globalData.letterInfo.shiftInfo.fromAddress.name === undefined) {
          let ret = await wepy.getLocation()
          this.$parent.globalData.letterInfo.shiftInfo.fromLocation = ret
        }
        this.$apply()
        if (submit) {
          let res = await api.request({
            url: 'letter/submit/',
            method: 'POST',
            data: this.$parent.globalData.letterInfo
          })
          console.log(res.data)
          let errLevel = 2
          let errMsg = ''
          try {
            errLevel = parseInt(res.data.err_level)
            errMsg = String(res.data.err_msg)
          } catch (e) {
            errLevel = 2
            errMsg = '未知错误，请重试'
          }
          if (errLevel === 0) {
            this.$parent.globalData.currentLetter = res.data
            wepy.navigateTo({
              url: 'write-4'
            })
          } else if (errLevel === 1) {
            wepy.showModal({
              title: '提示',
              content: errMsg,
              showCancel: false
            })
            wepy.pageScrollTo({
              scrollTop: 0
            })
          } else {
            this.$parent.globalData.writeIndexError = errMsg
            wepy.switchTab({
              url: 'index'
            })
          }
        } else {
          wepy.pageScrollTo({
            scrollTop: 0
          })
        }
      },
      bindInput(e) {
        // console.log(e.currentTarget.dataset.name)
        // console.log(e.detail.value)
        let key = e.currentTarget.dataset.name
        let value = e.detail.value
        console.log(`${key}: ${value}`)
        this[key] = value
        this.$parent.globalData.letterInfo.shiftInfo[key] = value
        wepy.setStorage({
          key: `letterInfo-shiftInfo-${key}`,
          data: value
        })
      },
      async bindToAddress(e) {
        await api.getAuthScope('scope.userLocation')

        let res = await wepy.chooseLocation()

        console.log(res)

        this.$parent.globalData.letterInfo.shiftInfo.toAddress = res

        this.$parent.globalData.letterInfo.shiftInfo.toAddress.showName = res.name

        if (this.$parent.globalData.letterInfo.shiftInfo.toAddress.showName === '') {
          this.$parent.globalData.letterInfo.shiftInfo.toAddress.showName = res.address
        }
        if (this.$parent.globalData.letterInfo.shiftInfo.toAddress.showName === '') {
          this.$parent.globalData.letterInfo.shiftInfo.toAddress.showName = `${res.address.latitude}, ${res.address.longtitude}`
        }

        wepy.setStorage({
          key: 'letterInfo-shiftInfo-toAddress',
          data: this.$parent.globalData.letterInfo.shiftInfo.toAddress
        })

        this.toAddress = this.$parent.globalData.letterInfo.shiftInfo.toAddress.showName
        this.toAddressChosen = true
        this.$apply()
      },
      async bindFromAddress(e) {
        await api.getAuthScope('scope.userLocation')

        let res = await wepy.chooseLocation()

        console.log(res)

        this.$parent.globalData.letterInfo.shiftInfo.fromAddress = res

        this.$parent.globalData.letterInfo.shiftInfo.fromAddress.showName = res.name

        if (this.$parent.globalData.letterInfo.shiftInfo.fromAddress.showName === '') {
          this.$parent.globalData.letterInfo.shiftInfo.fromAddress.showName = res.address
        }
        if (this.$parent.globalData.letterInfo.shiftInfo.fromAddress.showName === '') {
          this.$parent.globalData.letterInfo.shiftInfo.fromAddress.showName = `${res.address.latitude}, ${res.address.longtitude}`
        }

        wepy.setStorage({
          key: 'letterInfo-shiftInfo-fromAddress',
          data: this.$parent.globalData.letterInfo.shiftInfo.fromAddress
        })

        this.fromAddress = this.$parent.globalData.letterInfo.shiftInfo.fromAddress.showName
        this.fromAddressChosen = true
        this.$apply()
      },
      async bindReset(e) {
        let m = await wepy.showModal({
          title: '重置',
          content: '本操作将会清空该页所有信息（包括已经自动保存的），该操作不可撤销，是否确认重置？',
          confirmText: '确认'
        })
        if (m.confirm) {
          // 清空 this.$parent
          this.$parent.globalData.letterInfo.shiftInfo = {}
          this.$parent.globalData.letterInfo.letterStamp = {}
          // 清空 storage
          let list = ['toName', 'toAddress', 'toZip', 'toTel', 'fromName', 'fromAddress', 'fromZip', 'fromTel']
          for (let i in list) {
            wepy.removeStorageSync(`letterInfo-shiftInfo-${list[i]}`)
          }
          wepy.removeStorageSync(`letterInfo-letterStamp`)
          // 清空 PageData
          this.toName = ''
          // onLoad
          await this.onLoad()
          await this.onShow()
          await wepy.pageScrollTo({scrollTop: 0})
        }
      }
    }

    /**
     * WePY组件事件处理函数对象，存放响应组件之间通过 broadcast、emit、invoke所传递的事件的函数
     */
    events = {}

    /**
     * 生命周期函数--监听页面加载（一个页面只会调用一次）
     */
    async onLoad() {
      let e = await api.request('letter/stamp/')
      this.letterStamps = e.data
      for (let ls of this.letterStamps) {
        ls.icon = decodeURIComponent(ls.icon)
        ls.choose = false
      }
      this.$apply()

      this.$parent.globalData.letterInfo.letterStamp = this.letterStamps[0]
      this.$parent.globalData.letterInfo.shiftInfo = {
        toName: '',
        toTel: '',
        toZip: '',
        fromName: '',
        fromTel: '',
        fromZip: '',
        toAddress: {},
        fromAddress: {}
      }
      // 记住一般信息（'toName', 'toTel', 'toZip', 'fromName', 'fromTel', 'fromZip'）
      let key = ['toName', 'toTel', 'toZip', 'fromName', 'fromTel', 'fromZip']

      await key.forEach(async k => {
        try {
          let v = await wepy.getStorage({
            key: `letterInfo-shiftInfo-${k}`
          })
          this[k] = v.data
          this.$parent.globalData.letterInfo.shiftInfo[k] = v.data
        } catch (e) {
          this[k] = ''
          this.$parent.globalData.letterInfo.shiftInfo[k] = ''
        }
      })
      // 记住地址
      try {
        let v = await wepy.getStorage({
          key: 'letterInfo-shiftInfo-toAddress'
        })

        this.$parent.globalData.letterInfo.shiftInfo.toAddress = v.data
        this.toAddress = v.data.showName
        this.toAddressChosen = true
      } catch (e) {
        this.$parent.globalData.letterInfo.shiftInfo.toAddress = {}
        this.toAddress = '点击选择地址'
        this.toAddressChosen = false
      }
      try {
        let v = await wepy.getStorage({
          key: 'letterInfo-shiftInfo-fromAddress'
        })

        this.$parent.globalData.letterInfo.shiftInfo.fromAddress = v.data
        this.fromAddress = v.data.showName
        this.fromAddressChosen = true
      } catch (e) {
        this.$parent.globalData.letterInfo.shiftInfo.fromAddress = {}
        this.fromAddress = '点击选择地址'
        this.fromAddressChosen = false
      }
      // 记住邮票
      try {
        let v = await wepy.getStorage({
          key: 'letterInfo-letterStamp'
        })
        let letterStampId = v.data.id
        let tls = this.letterStamps.find(ls => ls.id === letterStampId)
        if (tls) {
          tls.choose = true
          this.$parent.globalData.letterInfo.letterStamp = tls
        } else {
          this.letterStamps[0].choose = true
          this.$parent.globalData.letterInfo.letterStamp = this.letterStamps[0]
        }
      } catch (e) {
        this.letterStamps[0].choose = true
        this.$parent.globalData.letterInfo.letterStamp = this.letterStamps[0]
      }
      this.$apply()
    };

    /**
     * 生命周期函数--监听页面显示（每次打开页面都会调用一次）
     */
    async onShow() {
    };

    /**
     * 生命周期函数--监听页面初次渲染完成
     * 页面初次渲染完成 —— 一个页面只会调用一次，代表页面已经准备妥当，可以和视图层进行交互
     */
    async onReady() {
    };

    /**
     * 生命周期函数--监听页面隐藏（当 navigateTo 或底部 tab 切换时调用）
     */
    async onHide() {
    };

    /**
     * 生命周期函数--监听页面卸载（当 redirectTo 或 navigateBack 的时候调用）
     */
    async onUnload() {
    };

    /**
     * 页面相关事件处理函数--监听用户下拉动作
     */
    async onPullDownRefresh() {
    };

    /**
     * 页面上拉触底事件的处理函数
     */
    async onReachBottom() {
    };

    /**
     * 用户点击右上角分享
     */
    onShareAppMessage() {
      let userId = wepy.getStorageSync('userId')
      return {
        title: api.shareInfo.title,
        path: `/pages/write/index?fromUID=${userId}`,
        imageUrl: api.shareInfo.imageUrl
      }
    };
  }
</script>

<style lang="less">

    .errorinfo {
      color:red;
      font-size:30rpx;
      padding-left:170rpx;
      padding-top:20rpx;
      display:block;
      text-align:left;

    }

    .roletype{
      font-size:54rpx;
      margin-bottom:60rpx;
      margin-top:80rpx;
      font-weight:bold;
      color:#1562B3;


    }

    .infotype{
      font-size:38rpx;

    }

    .inputbox{
      border-bottom:2px #1562B3 dashed;
      font-size:32rpx;
      color:#1562B3;
      width:434rpx;
      text-align:left;
    }


    .inputbox:hover{
      border-bottom: 2px #1562B3 solid;
    }

    .choosebutton{
      font-size: 32rpx;
      color: gray;
      border-bottom: 2px #1562B3 dashed;
      text-align: left;
      border-radius: 0;
      padding-left: 0;
      font-style: italic;
      width:434rpx;
      background-color: white;

    }

    .choosebutton:after{
      border:none;
    }


    .stampbutton{
      width:140rpx;
      height:140rpx;
      margin-bottom:15rpx;
      padding:6rpx;
      border:2px #1562B3 dashed;
      border-radius:6px;
      background-color:white;


    }

    .stampbutton:after{
      border:none;
    }

    .choose{
      border:3px #FF4A19 solid;
      border-radius:6px;

    }

    .stampview{
      width: 120rpx;
      height: 120rpx;
      margin: 0;
      border-radius: 2px;

    }

    .stampselector{
      margin-left:40rpx;
      margin-right:40rpx;
      width:590rpx;
      height:200rpx;
      display:flex;
      flex-direction:row;
      justify-content:space-between;


    }

    .resetbutton{
      margin-top:40rpx;
      width:60vw;
      margin-bottom:10vh;

    }

    .nextbutton{
      margin-top:6vh;
      width:60vw;
      color:white;
      background-color:#F17250;

    }

    .processbarholderfix{
      width:100vw;
      height:70rpx;
      position: fixed;
      background-color: #09427F;
      font-size: 24rpx;
      color: rgba(255,255,255,0.3);
      margin-bottom: 40rpx;
    }

    .chosen {
      color: #1562B3;
      font-style: normal;

    }

    .lineerror{
      border-bottom: 2px red dashed;
    }

    .infoform{
      width:670rpx;
      margin-left:40rpx;
      margin-right:40rpx;
      text-align:center;
      background:#FFFFFF;
      box-shadow:0 2px 4px 0 #D4CEBE;
      margin-top:110rpx;

    }

    .infoformlogo{
      height:18vh;
      margin-bottom:4vh;

    }

    .logo{
      width:8vh;
      height:8vh;
      margin-bottom:6vh;
      margin-top:6vh;


    }

    .note{
      width:74vw;
      margin-left:7vw;
      margin-right:7vw;
      font-size:30rpx;
      color:gray;
      text-align:center;

    }

    .infotypeholder{
      display:flex;
      flex-direction:row;
      justify-content:space-between;
      align-items:baseline;
      padding-left:60rpx;
      padding-right:60rpx;
      margin-top:4vh;

    }

    .bigholder{
      margin-bottom: 6vh;

    }





</style>
