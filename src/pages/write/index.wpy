<template>
  <view>
    <view class="writeIndexError" wx:if="writeIndexError">{{ writeIndexError }}</view>
    <swiper class="paperselector" @change="bindSwiperCurrentChange" current-item-id="{{ currentItemId }}">

      <block wx:for="{{ papers }}" wx:key="id">
        <swiper-item item-id="{{ item.id }}" class="papers">
          <view class="{{ item.class_attr }}" style="{{ item.style_attr }}">
            <view class="demotext">{{ item.demo_text }}</view>
            <view class="todaydate">{{ todayDate }}</view>
          </view>
          <!-- <view class="papername">{{ item.name }}</view> -->
        </swiper-item>
      </block>
      <view></view>

    </swiper>
    <view class="choosepapernote">滑动选择信纸</view>
    <form report-submit="True" @submit="bindStartWriting">
      <button formType="submit">开始</button>
    </form>
  </view>
</template>

<script>
  import wepy from 'wepy'
  import api from '@/utils/api'

  export default class extends wepy.page {
    /**
     * 页面配置对象，对应于原生的 page.json 文件
     */
    config = {
      navigationBarTitleText: '84号邮局'
    }

    /**
     * 页面渲染数据对象，存放可用于页面模板绑定的渲染数据
     */
    data = {
      todayDate: '',
      papers: {},
      current: 0,
      currentItem: {},
      currentItemId: -1,
      writeIndexError: ''
    }

    /**
     * wxml 事件处理函数对象，存放响应 wxml 中所捕获到的事件的函数，如 bindtap、bindchange
     */
    methods = {
      bindStartWriting(e) {
        api.formIdSubmit(e.detail.formId)
        // console.log(this.current)
        // console.log(this.currentItem.id)
        this.$parent.globalData.letterInfo.paperType = this.currentItem
        wepy.setStorage({
          key: 'letterInfo-paperType',
          data: this.currentItem
        })
        wepy.navigateTo({
          url: 'write-1'
        })
      },
      bindSwiperCurrentChange(e) {
        this.current = e.detail.current
        this.currentItem = this.papers[this.current]
      }
    }

    /**
     * WePY组件事件处理函数对象，存放响应组件之间通过 broadcast、emit、invoke所传递的事件的函数
     */
    events = {}

    /**
     * 生命周期函数--监听页面加载（一个页面只会调用一次）
     */
    async onLoad() {
    };

    /**
     * 生命周期函数--监听页面显示（每次打开页面都会调用一次）
     */
    async onShow() {
      // writeIndexError
      this.writeIndexError = this.$parent.globalData.writeIndexError
      this.$parent.globalData.writeIndexError = ''
      // 日期
      let d = new Date()
      this.todayDate = `${d.getFullYear()}-${d.getMonth() + 1}-${d.getDate()}`
      this.$apply()
      // 获取信纸
      let res = await api.request('letter/paper/')
      this.papers = res.data
      // 选择信纸
      try {
        let v = await wepy.getStorage({
          key: 'letterInfo-paperType'
        })
        this.currentItemId = v.data.id

        let pci = this.papers.find(p => p.id === this.currentItemId)
        if (pci) {
          this.currentItem = pci
          this.currentItemId = this.currentItem.id
        } else {
          console.log('No id for letterInfo-paperType')
          this.currentItem = this.papers[0]
          this.currentItemId = this.currentItem.id
        }
      } catch (e) {
        console.log('No storage for letterInfo-paperType')
        this.currentItem = this.papers[0]
        this.currentItemId = this.currentItem.id
      }

      this.$apply()
    };

    /**
     * 生命周期函数--监听页面初次渲染完成
     * 页面初次渲染完成 —— 一个页面只会调用一次，代表页面已经准备妥当，可以和视图层进行交互
     */
    async onReady() {
    };

    /**
     * 生命周期函数--监听页面隐藏（当 navigateTo 或底部 tab 切换时调用）
     */
    async onHide() {
    };

    /**
     * 生命周期函数--监听页面卸载（当 redirectTo 或 navigateBack 的时候调用）
     */
    async onUnload() {
    };

    /**
     * 页面相关事件处理函数--监听用户下拉动作
     */
    async onPullDownRefresh() {
    };

    /**
     * 页面上拉触底事件的处理函数
     */
    async onReachBottom() {
    };

    /**
     * 用户点击右上角分享
     */
    onShareAppMessage() {
      let userId = wepy.getStorageSync('userId')
      let imageUrl = `${api.host}/media/share/default.png`
      console.log(userId)
      console.log(imageUrl)
      return {
        path: `/pages/write/index?fromUID=${userId}`,
        imageUrl: imageUrl
      }
    };
  }
</script>

<style lang="less">
  .papers {
    /* border: red 2px solid; */
    padding: 20rpx;
    width:690rpx !important;
    margin-left: 40rpx;
    margin-right: 40rpx;
  }

  button{
    color:white;
    width:30vw;
    background-color: #FF4A19;
  }

  .choosepapernote{
    text-align: center;
    font-size: 30rpx;
    margin-top: 0rpx;
    margin-bottom: 20rpx;
    color:gray;
  }

  .paper-01{
    /* 暖阳 */
    background: #FCF7E8;
    border: 2px solid #E5DCC2;
    outline: 6px solid #FCF7E8;
    box-shadow: 0 4px 10px 0 rgba(160,147,105,0.43);
    width:550rpx;
    height:720rpx;
    color:#6E5F31;
    font-size: 32rpx;
    padding: 40rpx;
  }

  .paper-02{
    /* 纯白 */
    background: #FFFFFF;
    border: 3px solid #FBBAD0;
    border-style: double;
    border-radius: 1%;
    box-shadow: 0 4px 10px 0 rgba(160,147,105,0.43);
    width:550rpx;
    height:720rpx;
    color:#6E1A36;
    font-size: 32rpx;
    padding: 40rpx;
  }

  .paper-03{
    /* 八十四 */
    background: #FAF9F6;
    border: 2px solid #1562B3;
    border-style: dashed;
    outline: 6px solid #FAF9F6;
    box-shadow: 0 4px 10px 0 rgba(160,147,105,0.43);
    width:550rpx;
    height:720rpx;
    color:#052B53;
    font-size: 32rpx;
    padding: 40rpx;
  }

  .paperselector{
    height:850rpx;
    margin-top: 20rpx;
    margin-bottom: 20rpx;
    margin-left: 0;
    margin-right: 0;
    padding-left: 0;
    padding-right: 0;
    padding-bottom:10rpx;
    width:750rpx;
  }

  .papername{
    font-size: 30rpx;
    margin-top:40rpx;
    color:gray;
    text-align:center;


  }

  swiperitem.paper{
    width:550rpx;
  }

  .demotext{
    white-space: pre-wrap;
    height: 690rpx;
    line-height: 60rpx;
  }

  .writeIndexError{
    text-align: center;
    color: white;
    background-color: rgba(255,14,14,0.75);
    font-size: 30rpx;
  }

  .todaydate{
    position: relative;
    bottom: 10rpx;
    left: 400rpx;
    font-size: 30rpx;

  }

</style>
