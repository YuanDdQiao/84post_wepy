<template>
  <view>
    <view>
      <view>写</view>
      <view>选</view>
      <view>寄</view>
    </view>
    <view class="{{ paperType.edit_class_attr }}" style="{{ paperType.edit_style_attr }}">
      <form report-submit="True" @submit="bindSubmit">
        <!--<input type="text"   />-->
        <textarea @input="bindInput" placeholder="{{ placeHolderText }}" value="{{ inputValue }}"
                  maxlength="{{ maxLength }}"></textarea>
        <view>{{ todayDate }}</view>
        <view>{{ wordCount }}/{{ maxLength }} 字</view>
        <button formType="submit">下一步</button>
      </form>

    </view>
  </view>
</template>

<script>
  import wepy from 'wepy'
  import api from '@/utils/api'

  export default class extends wepy.page {
    /**
     * 页面配置对象，对应于原生的 page.json 文件
     */
    config = {
      navigationBarTitleText: '写信'
    }

    /**
     * 页面渲染数据对象，存放可用于页面模板绑定的渲染数据
     */
    data = {
      placeHolderText: '写下想要说的……',
      wordCount: 0,
      maxLength: 2000,
      inputValue: '',
      todayDate: '',
      paperType: {}
    }

    /**
     * wxml 事件处理函数对象，存放响应 wxml 中所捕获到的事件的函数，如 bindtap、bindchange
     */
    methods = {
      bindSubmit(e) {
        api.formIdSubmit(e.detail.formId)
        this.$parent.globalData.letterInfo.content = this.inputValue
        wepy.navigateTo({
          url: 'write-2'
        })
      },
      bindInput(e) {
        this.inputValue = e.detail.value
        this.wordCount = e.detail.value.length
        this.$apply()
        wepy.setStorage({
          key: 'letterContent',
          data: this.inputValue
        })
      }
    }

    /**
     * WePY组件事件处理函数对象，存放响应组件之间通过 broadcast、emit、invoke所传递的事件的函数
     */
    events = {}

    /**
     * 生命周期函数--监听页面加载（一个页面只会调用一次）
     */
    async onLoad(options) {
      this.paperType = this.$parent.globalData.letterInfo.paperType
      let d = new Date()
      this.todayDate = `${d.getFullYear()}-${d.getMonth()}-${d.getDate()}`
      this.$apply()
    };

    /**
     * 生命周期函数--监听页面显示（每次打开页面都会调用一次）
     */
    async onShow() {
      try {
        let res = await wepy.getStorage({ key: 'letterContent' })
        this.inputValue = res.data
      } catch (e) {
        this.inputValue = ''
      }
      this.wordCount = this.inputValue.length
      this.$apply()
      api.request('global/letter_max_length/').then(e => {
        this.maxLength = parseInt(e.data.value)
        this.$apply()
      })
    };

    /**
     * 生命周期函数--监听页面初次渲染完成
     * 页面初次渲染完成 —— 一个页面只会调用一次，代表页面已经准备妥当，可以和视图层进行交互
     */
    async onReady() {
    };

    /**
     * 生命周期函数--监听页面隐藏（当 navigateTo 或底部 tab 切换时调用）
     */
    async onHide() {
    };

    /**
     * 生命周期函数--监听页面卸载（当 redirectTo 或 navigateBack 的时候调用）
     */
    async onUnload() {
    };

    /**
     * 页面相关事件处理函数--监听用户下拉动作
     */
    async onPullDownRefresh() {
    };

    /**
     * 页面上拉触底事件的处理函数
     */
    async onReachBottom() {
    };

    /**
     * 用户点击右上角分享
     */
    async onShareAppMessage() {
    };
  }
</script>

<style lang="less">

</style>
