<template>
  <view class="more-space uber">
    <!--<image class="icon" src="/images/shipping.svg"></image>-->

    <view class="title">
      <view class="line_1">{{ fromName }}写给您的信件</view>
      <view class="line_2">
        <text wx:if="{{ !arrived }}">正在运输中</text>
        <text wx:elif="{{ !completed }}">正在配送中</text>
        <text wx:else>已签收</text>
      </view>
    </view>

    <image class="headicon" src="/images/transfering.png" wx:if="{{ !arrived }}"></image>
    <image class="headicon" src="/images/arrived.png" wx:elif="{{ !completed }}"></image>
    <image class="headicon" src="/images/completed.png" wx:else></image>

    <view class="note">
      <text wx:if="{{ !arrived }}">平邮不支持物流查询，请时不时到「信箱 - 取平邮」中看看有没有你的信件</text>
      <text wx:elif="{{ !completed }}">您的信件已经到达但尚未签收，请在取件地址附近到「信箱 - 取平邮」中查找</text>
      <text wx:else>您的信件已经完成签收，如果不是您签收的那么很抱歉可能是被他人取走了</text>
    </view>
    <view class="buttons">
      <form report-submit="True" @submit="bindSubscribe">
        <button class="btn btn-md btn-primary" formType="submit" disabled="{{ subscribed }}" wx:if="{{ !arrived }}">
          {{ subscribeButtonMsg }}
        </button>
      </form>
      <form report-submit="True" @submit="bindWrite">
        <button class="btn btn-md" formType="submit">寄封信</button>
      </form>
      <form report-submit="True" @submit="bindSearch">
        <button class="btn btn-md" formType="submit">去信箱</button>
      </form>
    </view>

    <image class="typelogo" src="/images/logo_icon.png"></image>

  </view>
</template>

<script>
  import wepy from 'wepy'
  import api from '@/utils/api'

  export default class extends wepy.page {
    /**
     * 页面配置对象，对应于原生的 page.json 文件
     */
    config = {
      navigationBarTitleText: '提示'
    }

    /**
     * 页面渲染数据对象，存放可用于页面模板绑定的渲染数据
     */
    data = {
      sourceLetterId: 0,
      subscribeButtonMsg: '订阅到信通知',
      subscribed: false,
      fromName: '您的朋友',
      completed: false,
      arrived: false
    }

    /**
     * wxml 事件处理函数对象，存放响应 wxml 中所捕获到的事件的函数，如 bindtap、bindchange
     */
    methods = {
      bindWrite(e) {
        api.formIdSubmit(e.detail.formId)
        wepy.redirectTo({ url: '/pages/write/index' })
      },
      bindSearch(e) {
        api.formIdSubmit(e.detail.formId)
        wepy.redirectTo({ url: '/pages/box/box1-1' })
      },
      async bindSubscribe(e) {
        api.formIdSubmit(e.detail.formId)
        api.request(`letter/mark/subscribed/${this.sourceLetterId}/`)
        await wepy.showModal({
          title: '订阅成功',
          content: '您将在信件到达后收到微信模板消息通知',
          showCancel: false,
          confirmText: '确定',
          confirmColor: '#3CC51F'
        })
        this.onShow()
      }
    }

    /**
     * WePY组件事件处理函数对象，存放响应组件之间通过 broadcast、emit、invoke所传递的事件的函数
     */
    events = {}

    async onLoad(options) {
      console.log(options)
      this.sourceLetterId = options.sourceLetter
      console.log('sourceLetterId', this.sourceLetterId)
      // 获取非敏感信件信息
      let r = await api.request(`letter/info/insensitive/${this.sourceLetterId}/`)
      console.log('r', r)
      let fromName = r.data.from_name
      if (fromName) {
        this.fromName = fromName
      }
      this.completed = r.data.completed
      this.arrived = r.data.arrived
      this.$apply()
    }

    async onShow() {
      let interval = setInterval(async () => {
        if (this.sourceLetterId) {
          clearInterval(interval)
          // 获取当前订阅状态
          let r = await api.request(`letter/check/subscribed/${this.sourceLetterId}/`)
          this.subscribed = r.data.subscribed
          this.$apply()
        }
      }, 50)
    }
  }
</script>

<style lang="less">

  .uber {
    height: calc(~"100vh - 2 * 60rpx - 6rpx");
    position: relative;
  }

  .title {
    .line_1 {
      font-size: ~"34rpx";
      font-weight: bold;
      margin-top: 4.6vh;
      opacity: 0.6;
    }
    .line_2 {
      font-size: ~"40rpx";
      font-weight: bold;
      margin-top: 2vh;
    }

  }

  .tips {
    text-align: center;
    font-size: ~"28rpx";
    margin-bottom: 5vh;
    font-weight: bold;
    color: gray;

  }

  .note {
    width: 74vw;
    margin: 5.4vh auto 5.4vh;
    font-size: ~"28rpx";
    line-height: 1.4;
    color: gray;
    text-align: center;
  }

  .buttons {
    margin-top: 8vh;
    .btn {
      margin: 0 auto 2vh;
    }
  }

  .logo {
    width: 8vh;
    height: 8vh;
    margin-bottom: 6vh;
    margin-top: 6vh;
  }

  image {
    width: ~"300rpx";
    height: ~"300rpx";
    display: inline-block;
    overflow: hidden;
    margin-left: ~"185rpx";
    margin-right: ~"185rpx";

  }

  .headicon {
    width: ~"196rpx";
    height: ~"196rpx";
    margin: 5.4vh auto 0;
  }

  .typelogo {
    width: ~"51rpx";
    height: ~"54rpx";
    position: absolute;
    left: ~"296rpx";
    bottom: 3.8vh;
    margin-left: auto;
    margin-right: auto;
  }


</style>
